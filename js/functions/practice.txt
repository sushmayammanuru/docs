functions in javascript
	Functions in JavaScript are blocks of code that perform a specific task and
	can be invoked with the () operator or as variable values. They are used to
	encapsulate logic, making that code more reusable and easier to understand.
	
Function Definition: 
	A function is defined with the function keyword, followed by a name, 
	followed by parentheses (). Function names can contain letters, digits, 
	underscores, and dollar signs (same rules as variables). The parentheses 
	may include parameter names separated by commas: (parameter1, parameter2,..)
	The code to be executed by the function is placed inside curly brackets {}.
	Function parameters are listed inside the parentheses () in the function
	definition. Function arguments are the values received by the function when
	it is invoked. Inside the function, the arguments (the parameters) behave
	as local variables. 
Syntax:
	function functionName(parameter1, parameter2, parameter3) {
  // code to be executed
}

Function Invocation: 
	The code inside the function will execute when “something” invokes (calls)
	the function. This can happen when an event occurs (when a user clicks
	a button), when it is invoked (called) from JavaScript code,or automatically 
	(self-invoked). 
Syntax:
	functionName(argument1, argument2, argument3);
	Function Return:
	When JavaScript reaches a return statement, the function
	will stop executing. If the function was invoked from a statement,JavaScript
	will “return” to execute the code after the invoking statement. Functions 
	often compute a return value. The return value is “returned” back to the
	“caller”. 
Syntax:

function functionName(parameter1, parameter2, parameter3) {
  // code to be executed
  return result;
}